From 8c8386a7f3f482a9c917f51d28e0042e55f56b3e Mon Sep 17 00:00:00 2001
From: Mike Gelfand <mikedld@mikedld.com>
Date: Wed, 7 Sep 2016 01:09:04 +0300
Subject: [PATCH] Fix coding style and building with !TR_LIGHTWEIGHT

---
 libtransmission/crypto-utils-openssl.c | 60 +++++++++++++++++++---------------
 1 file changed, 33 insertions(+), 27 deletions(-)

--- a/libtransmission/crypto-utils-openssl.c
+++ b/libtransmission/crypto-utils-openssl.c
@@ -15,6 +15,7 @@
 #include <assert.h>
 
 #include <openssl/bn.h>
+#include <openssl/crypto.h>
 #include <openssl/dh.h>
 #include <openssl/err.h>
 #include <openssl/evp.h>
@@ -49,7 +50,12 @@ log_openssl_error (const char * file,
       static bool strings_loaded = false;
       if (!strings_loaded)
         {
+#if OPENSSL_VERSION_NUMBER < 0x10100000
           ERR_load_crypto_strings ();
+#else
+          OPENSSL_init_crypto (OPENSSL_INIT_LOAD_CRYPTO_STRINGS, NULL);
+#endif
+
           strings_loaded = true;
         }
 #endif
@@ -231,6 +237,7 @@ tr_rc4_process (tr_rc4_ctx_t   handle,
 ***/
 
 #if OPENSSL_VERSION_NUMBER < 0x10100000
+
 static inline int
 DH_set0_pqg (DH     * dh,
              BIGNUM * p,
@@ -238,28 +245,29 @@ DH_set0_pqg (DH     * dh,
              BIGNUM * g)
 {
   /* If the fields p and g in d are NULL, the corresponding input
-   * parameters MUST be non-NULL.  q may remain NULL.
+   * parameters MUST be non-NULL. q may remain NULL.
    */
-  if ((dh->p == NULL && p == NULL)
-      || (dh->g == NULL && g == NULL))
+  if ((dh->p == NULL && p == NULL) || (dh->g == NULL && g == NULL))
     return 0;
 
-  if (p != NULL) {
-    BN_free (dh->p);
-    dh->p = p;
-  }
-  if (q != NULL) {
-    BN_free (dh->q);
-    dh->q = q;
-  }
-  if (g != NULL) {
-    BN_free (dh->g);
-    dh->g = g;
-  }
+  if (p != NULL)
+    {
+      BN_free (dh->p);
+      dh->p = p;
+    }
+  if (q != NULL)
+    {
+      BN_free (dh->q);
+      dh->q = q;
+    }
+  if (g != NULL)
+    {
+      BN_free (dh->g);
+      dh->g = g;
+    }
 
-  if (q != NULL) {
+  if (q != NULL)
     dh->length = BN_num_bits (q);
-  }
 
   return 1;
 }
@@ -268,8 +276,8 @@ static inline int
 DH_set_length (DH   * dh,
                long   length)
 {
-	dh->length = length;
-	return 1;
+  dh->length = length;
+  return 1;
 }
 
 static inline void
@@ -296,12 +304,11 @@ tr_dh_new (const uint8_t * prime_num,
 
   assert (prime_num != NULL);
   assert (generator_num != NULL);
+
   p = BN_bin2bn (prime_num, prime_num_length, NULL);
   g = BN_bin2bn (generator_num, generator_num_length, NULL);
 
-  if (!check_pointer (p) ||
-      !check_pointer (g) ||
-      !DH_set0_pqg (handle, p, NULL, g))
+  if (!check_pointer (p) || !check_pointer (g) || !DH_set0_pqg (handle, p, NULL, g))
     {
       BN_free (p);
       BN_free (g);
@@ -329,20 +336,19 @@ tr_dh_make_key (tr_dh_ctx_t   raw_handle
 {
   DH * handle = raw_handle;
   int dh_size, my_public_key_length;
-  const BIGNUM * hand_pub_key;
+  const BIGNUM * my_public_key;
 
   assert (handle != NULL);
   assert (public_key != NULL);
 
-
   DH_set_length(handle, private_key_length * 8);
 
   if (!check_result (DH_generate_key (handle)))
     return false;
 
-  DH_get0_key (handle, &hand_pub_key, NULL);
+  DH_get0_key (handle, &my_public_key, NULL);
 
-  my_public_key_length = BN_bn2bin (hand_pub_key, public_key);
+  my_public_key_length = BN_bn2bin (my_public_key, public_key);
   dh_size = DH_size (handle);
 
   tr_dh_align_key (public_key, my_public_key_length, dh_size);
